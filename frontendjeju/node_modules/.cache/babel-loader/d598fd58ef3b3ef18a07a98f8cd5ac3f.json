{"ast":null,"code":"var _jsxFileName = \"/Users/youlee/Desktop/metanet_internship_project/frontendjeju/src/views/Maps.js\",\n    _s = $RefreshSig$();\n\nimport { Card, CardBody } from \"reactstrap\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MapWrapper = () => {\n  _s();\n\n  const [nearTour, setNearTour] = useState({\n    id: '',\n    source: '',\n    location: {\n      type: '',\n      coordinates: ['', '']\n    }\n  });\n  const reqUrl2 = '/map/findNear';\n  const mapLoction = [];\n\n  const getTourNear = async () => {\n    var temp = new URLSearchParams(window.location.search);\n    ;\n    await axios.get(reqUrl2, {\n      params: {\n        longitude: temp.get('longitude'),\n        latitude: temp.get('latitude'),\n        distance: 2\n      }\n    }).then(res => setNearTour(res.data));\n  };\n\n  useEffect(() => {\n    getTourNear();\n  }, []);\n  useEffect(() => {\n    for (let i = 0; i < nearTour.length; i++) {\n      mapLoction.push(nearTour[i].source);\n      mapLoction.push(nearTour[i].location.coordinates);\n    }\n\n    sessionStorage.setItem(\"maps_arr\", mapLoction);\n\n    if (mapLoction[0] != undefined) {\n      const script = document.createElement(\"script\");\n      script.innerHTML = `\n\t\t\t\tvar map;\n\t\t\t\tvar markerInfo;\n\t\t\t\t//출발지,도착지 마커\n\t\t\t\tvar marker_s, marker_e, marker_p, new_marker_p2;\n\t\t\t\t//경로그림정보\n\t\t\t\tvar drawInfoArr = [];\n\t\t\t\tvar drawInfoArr2 = [];\n\t\t\t\tvar marker_attr = [];\n\t\t\t\tvar chktraffic = [];\n\t\t\t\tvar resultdrawArr = [];\n\t\t\t\tvar resultMarkerArr = [];\n\n\t\t\t\t//관광지는 n x [2] 열은 위도,경도\n\t\t\t\tvar attr_list = [\"관광지1\", 33.5200,126.51555,\"관광지2\",33.5030,126.50235,\"관광지3\",33.5030,126.49235,\"관광지4\",33.5030,126.48235];\n\t\t\t\tattr_list = sessionStorage.getItem(\"maps_arr\");\n\t\t\t\tattr_list = attr_list.split(',');\n\t\t\t\tconst markers = new Map();\n\t\t\t\tfunction initTmap() {\n\t\t\t\t\t// 1. 지도 띄우기\n\t\t\t\t\tmap = new Tmapv2.Map(\"map_div\", {\n\t\t\t\t\t\tcenter : new Tmapv2.LatLng(33.4000,126.51555),\n\t\t\t\t\t\twidth : \"100%\",\n\t\t\t\t\t\theight : \"800px\",\n\t\t\t\t\t\tzoom : 11,\n\t\t\t\t\t\tzoomControl : true,\n\t\t\t\t\t\tscrollwheel : true\n\t\t\t\t\t});\n\t\t\t\t\taddMarkersTooMuch(attr_list);\n\t\t\t\t\t\n\n\t\t\t\t\tlet temp_html = \"\";\n\t\t\t\t\ttemp_html = '<button value=\"ROAD\" onclick=\"MapType(this.value)\">ROAD</button>\\\n\t\t\t\t\t<button value=\"SATELLITE\" onclick=\"MapType(this.value)\">SATELLITE</button>\\\n\t\t\t\t\t<button value=\"HYBRID\" onclick=\"MapType(this.value)\">HYBRID</button>';\n\t\t\t\t\t$(\"#mapty\").html(temp_html);\n\n\t\t\t\t\tlet cent_button=\"\";\n\t\t\t\t\tcent_button='<button>'+this+'</button>';\n\t\t\t\t\t$(\"#res3\").html(cent_button);\n\t\t\t\t\t\n\t\t\t\t\ttemp_html = '<form><input class=\"map-resetbtn\" type=\"button\" value=\"초기화\" onclick=\"window.location.reload()\"></form>';\n\t\t\t\t\t$(\"#init_map\").html(temp_html);\n\t\t\t\t}\n\t\t\t\t//end initmap\n\t\t\t\tfunction addMarkersTooMuch(attr_list) \n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < attr_list.length; i+=3) \n\t\t\t\t\t{\n\t\t\t\t\t\tlet title1 = attr_list[i];\n\t\t\t\t\t\tlet lat = attr_list[i+2];\n\t\t\t\t\t\tlet lng = attr_list[i+1];\n\t\t\t\t\t\tlet label=\"<span style='background-color: #46414E;color:white'>\"+attr_list[i]+\"</span>\";\n\t\t\t\t\t\tlet marker;\n\t\t\t\t\t\t//Marker 객체 생성.\n\t\t\t\t\t\tmarker = new Tmapv2.Marker({\n\t\t\t\t\t\t\tposition: new Tmapv2.LatLng(lat, lng), //Marker의 중심좌표 설정.\n\t\t\t\t\t\t\ttitle: title1,\n\t\t\t\t\t\t\tlabel: label\n\t\t\t\t\t\t});\n\t\t\t\t\t\tmarker_attr.push(marker);\n\t\t\t\t\t\tmarker.setMap(map); //Marker가 표시될 Map 설정.\n\t\t\t\t\t\tmarker.addListener(\"click\", function(evt) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmarkers.set(title1, marker);\n\t\t\t\t\t\t\tretres();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfunction removeMarkers() {\n\t\t\t\t\tmarkers.clear();\n\t\t\t\t}\n\n\t\t\t\tfunction Sendinfo() \n\t\t\t\t{\n\t\t\t\t\t\t//기존 맵에 있던 정보들 초기화\n\t\t\t\t\t\tresettingMap();\n\t\t\t\t\t\t//sendinfo variable\n\t\t\t\t\t\tlet startx=\"\";\n\t\t\t\t\t\tlet starty=\"\";\n\t\t\t\t\t\tlet endx=\"\";\n\t\t\t\t\t\tlet endy=\"\";\n\t\t\t\t\t\tlet pass=\"\";\n\t\t\t\t\t\tconst iter1 = markers.entries();\n\t\t\t\t\t\tlet temp_mark;\n\t\t\t\t\t\tfor(var i=0;i<markers.size;i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//start point\n\t\t\t\t\t\t\ttemp_mark = iter1.next().value;\n\t\t\t\t\t\t\ttemp_mark = temp_mark[1].getPosition();\n\t\t\t\t\t\t\tif(i==0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstarty = String(temp_mark.latitude());\n\t\t\t\t\t\t\t\tstartx = String(temp_mark.longitude());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if(i == Number(markers.size)-1) // end point\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tendy = String(temp_mark.latitude());\n\t\t\t\t\t\t\t\tendx = String(temp_mark.longitude());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse // pass point\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(i == Number(markers.size)-2)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpass+=String(temp_mark.longitude()) + \",\" + String(temp_mark.latitude());\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\tpass+=String(temp_mark.longitude()) + \",\" + String(temp_mark.latitude()+ \"_\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//JSON TYPE EDIT [S]\n\t\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t\ttype : \"POST\",\n\t\t\t\t\t\t\turl : \"https://apis.openapi.sk.com/tmap/routes?version=1&format=json&callback=result\",\n\t\t\t\t\t\t\tasync : false,\n\t\t\t\t\t\t\tdata : {\n\t\t\t\t\t\t\t\t\"appKey\" : \"l7xx34194c87b04c4474abec384877be1ee4\",\n\t\t\t\t\t\t\t\t\"startX\" : startx,\n\t\t\t\t\t\t\t\t\"startY\" : starty,\n\t\t\t\t\t\t\t\t\"endX\" : endx,\n\t\t\t\t\t\t\t\t\"endY\" : endy,\n\t\t\t\t\t\t\t\t\"passList\" : pass,\n\t\t\t\t\t\t\t\t\"reqCoordType\" : \"WGS84GEO\",\n\t\t\t\t\t\t\t\t\"resCoordType\" : \"EPSG3857\",\n\t\t\t\t\t\t\t\t\"searchOption\" : \"0\",\n\t\t\t\t\t\t\t\t\"trafficInfo\" : \"Y\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsuccess : function(response) \n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar resultData = response.features;\n\t\t\n\t\t\t\t\t\t\t\tvar tDistance = \"총 거리 : \"\n\t\t\t\t\t\t\t\t\t+ (resultData[0].properties.totalDistance / 1000)\n\t\t\t\t\t\t\t\t\t\t.toFixed(1) + \"km,\";\n\t\t\t\t\t\t\t\tvar tTime = \" 총 시간 : \"\n\t\t\t\t\t\t\t\t\t+ (resultData[0].properties.totalTime / 60)\n\t\t\t\t\t\t\t\t\t\t.toFixed(0) + \"분,\";\n\t\t\t\t\t\t\t\tvar tFare = \" 총 요금 : \"\n\t\t\t\t\t\t\t\t\t+ resultData[0].properties.totalFare\n\t\t\t\t\t\t\t\t\t+ \"원,\";\n\t\t\t\t\t\t\t\tvar taxiFare = \" 예상 택시 요금 : \"\n\t\t\t\t\t\t\t\t\t+ resultData[0].properties.taxiFare\n\t\t\t\t\t\t\t\t\t+ \"원\";\n\t\t\n\t\t\t\t\t\t\t\t$(\"#result\").text(\n\t\t\t\t\t\t\t\t\t\ttDistance + tTime + tFare\n\t\t\t\t\t\t\t\t\t\t\t\t+ taxiFare);\n\t\t\n\t\t\t\t\t\t\t\t//교통정보 표출 옵션값을 체크\n\t\t\t\t\t\t\t\tfor ( var i in resultData) { //for문 [S]\n\t\t\t\t\t\t\t\t\tvar geometry = resultData[i].geometry;\n\t\t\t\t\t\t\t\t\tvar properties = resultData[i].properties;\n\t\t\n\t\t\t\t\t\t\t\t\tif (geometry.type == \"LineString\") \n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t//교통 정보도 담음\n\t\t\t\t\t\t\t\t\tchktraffic.push(geometry.traffic);\n\t\t\t\t\t\t\t\t\tvar sectionInfos = [];\n\t\t\t\t\t\t\t\t\tvar trafficArr = geometry.traffic;\n\t\t\n\t\t\t\t\t\t\t\t\tfor ( var j in geometry.coordinates) \n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// 경로들의 결과값들을 포인트 객체로 변환 \n\t\t\t\t\t\t\t\t\t\tvar latlng = new Tmapv2.Point(geometry.coordinates[j][0], geometry.coordinates[j][1]);\n\t\t\t\t\t\t\t\t\t\t// 포인트 객체를 받아 좌표값으로 변환\n\t\t\t\t\t\t\t\t\t\tvar convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(latlng);\n\t\t\n\t\t\t\t\t\t\t\t\t\tsectionInfos.push(convertPoint);\n\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\tdrawLine(sectionInfos,trafficArr);\n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\telse \n\t\t\t\t\t\t\t\t\t{\n\t\t\n\t\t\t\t\t\t\t\t\tvar markerImg = \"\";\n\t\t\t\t\t\t\t\t\tvar pType = \"\";\n\t\t\n\t\t\t\t\t\t\t\t\tif (properties.pointType == \"S\") { //출발지 마커\n\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\";\n\t\t\t\t\t\t\t\t\t\tpType = \"S\";\n\t\t\t\t\t\t\t\t\t} else if (properties.pointType == \"E\") { //도착지 마커\n\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\";\n\t\t\t\t\t\t\t\t\t\tpType = \"E\";\n\t\t\t\t\t\t\t\t\t} else { //각 포인트 마커\n\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://topopen.tmap.co.kr/imgs/point.png\";\n\t\t\t\t\t\t\t\t\t\tpType = \"P\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\t// 경로들의 결과값들을 포인트 객체로 변환 \n\t\t\t\t\t\t\t\t\tvar latlon = new Tmapv2.Point(\n\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[0],\n\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[1]);\n\t\t\t\t\t\t\t\t\t// 포인트 객체를 받아 좌표값으로 다시 변환\n\t\t\t\t\t\t\t\t\tvar convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(latlon);\n\t\t\n\t\t\t\t\t\t\t\t\tvar routeInfoObj = \n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tmarkerImage : markerImg,\n\t\t\t\t\t\t\t\t\t\tlng : convertPoint._lng,\n\t\t\t\t\t\t\t\t\t\tlat : convertPoint._lat,\n\t\t\t\t\t\t\t\t\t\tpointType : pType\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t// 마커 추가\n\t\t\t\t\t\t\t\t\taddMarkers(routeInfoObj);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}//for문 [E]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t//JSON TYPE EDIT [E]\n\t\t\t\t\tinitTmap();\n\t\t\t}\n\n\t\t\tfunction addComma(num) {\n\t\t\t\t\t\tvar regexp = /\\B(?=(\\d{3})+(?!\\d))/g;\n\t\t\t\t\t\treturn num.toString().replace(regexp, ',');\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t//마커 생성하기\n\t\t\t\t\tfunction addMarkers(infoObj) \n\t\t\t\t\t{\n\t\t\t\t\t\tvar size = new Tmapv2.Size(24, 38);//아이콘 크기 설정합니다.\n\t\t\t\t\n\t\t\t\t\t\tif (infoObj.pointType == \"P\") { //포인트점일때는 아이콘 크기를 줄입니다.\n\t\t\t\t\t\t\tsize = new Tmapv2.Size(8, 8);\n\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\tmarker_p = new Tmapv2.Marker({\n\t\t\t\t\t\t\tposition : new Tmapv2.LatLng(infoObj.lat, infoObj.lng),\n\t\t\t\t\t\t\ticon : infoObj.markerImage,\n\t\t\t\t\t\t\ticonSize : size,\n\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t});\n\t\t\t\t\n\t\t\t\t\t\tresultMarkerArr.push(marker_p);\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t//라인그리기\n\t\t\t\t\tfunction drawLine(arrPoint, traffic) \n\t\t\t\t\t{\n\t\t\t\t\t\tvar polyline_;\n\t\t\t\t\n\t\t\t\t\t\tif (chktraffic.length != 0) {\n\t\t\t\t\n\t\t\t\t\t\t\t// 교통정보 혼잡도를 체크\n\t\t\t\t\t\t\t// strokeColor는 교통 정보상황에 다라서 변화\n\t\t\t\t\t\t\t// traffic :  0-정보없음, 1-원활, 2-서행, 3-지체, 4-정체  (black, green, yellow, orange, red)\n\t\t\t\t\n\t\t\t\t\t\t\tvar lineColor = \"\";\n\t\t\t\t\t\t\tif (traffic != \"0\" && traffic != undefined) \n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (traffic.length == 0) //length가 0인것은 교통정보가 없으므로 검은색으로 표시\n\t\t\t\t\t\t\t\t{ \n\t\t\t\t\n\t\t\t\t\t\t\t\t\tlineColor = \"#06050D\";\n\t\t\t\t\t\t\t\t\t//라인그리기[S]\n\t\t\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\t\t\tpath : arrPoint,\n\t\t\t\t\t\t\t\t\t\tstrokeColor : lineColor,\n\t\t\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t\t\t\t\t\t//라인그리기[E]\n\t\t\t\t\t\t\t\t} else \n\t\t\t\t\t\t\t\t{ //교통정보가 있음\n\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (traffic[0][0] != 0) { //교통정보 시작인덱스가 0이 아닌경우\n\t\t\t\t\t\t\t\t\t\tvar trafficObject = \"\";\n\t\t\t\t\t\t\t\t\t\tvar tInfo = [];\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var z = 0; z < traffic.length; z++) {\n\t\t\t\t\t\t\t\t\t\t\ttrafficObject = {\n\t\t\t\t\t\t\t\t\t\t\t\t\"startIndex\" : traffic[z][0],\n\t\t\t\t\t\t\t\t\t\t\t\t\"endIndex\" : traffic[z][1],\n\t\t\t\t\t\t\t\t\t\t\t\t\"trafficIndex\" : traffic[z][2],\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\ttInfo.push(trafficObject)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tvar noInfomationPoint = [];\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var p = 0; p < tInfo[0].startIndex; p++) {\n\t\t\t\t\t\t\t\t\t\t\tnoInfomationPoint.push(arrPoint[p]);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t//라인그리기[S]\n\t\t\t\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\t\t\t\tpath : noInfomationPoint,\n\t\t\t\t\t\t\t\t\t\t\tstrokeColor : \"#06050D\",\n\t\t\t\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t//라인그리기[E]\n\t\t\t\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var x = 0; x < tInfo.length; x++) {\n\t\t\t\t\t\t\t\t\t\t\tvar sectionPoint = []; //구간선언\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tfor (var y = tInfo[x].startIndex; y <= tInfo[x].endIndex; y++) {\n\t\t\t\t\t\t\t\t\t\t\t\tsectionPoint.push(arrPoint[y]);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (tInfo[x].trafficIndex == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#06050D\";\n\t\t\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 1) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#61AB25\";\n\t\t\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 2) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#FFFF00\";\n\t\t\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 3) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#E87506\";\n\t\t\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 4) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#D61125\";\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t//라인그리기[S]\n\t\t\t\t\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\t\t\t\t\tpath : sectionPoint,\n\t\t\t\t\t\t\t\t\t\t\t\tstrokeColor : lineColor,\n\t\t\t\t\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t//라인그리기[E]\n\t\t\t\t\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else { //0부터 시작하는 경우\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tvar trafficObject = \"\";\n\t\t\t\t\t\t\t\t\t\tvar tInfo = [];\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var z = 0; z < traffic.length; z++) {\n\t\t\t\t\t\t\t\t\t\t\ttrafficObject = {\n\t\t\t\t\t\t\t\t\t\t\t\t\"startIndex\" : traffic[z][0],\n\t\t\t\t\t\t\t\t\t\t\t\t\"endIndex\" : traffic[z][1],\n\t\t\t\t\t\t\t\t\t\t\t\t\"trafficIndex\" : traffic[z][2],\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\ttInfo.push(trafficObject)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var x = 0; x < tInfo.length; x++) {\n\t\t\t\t\t\t\t\t\t\t\tvar sectionPoint = []; //구간선언\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tfor (var y = tInfo[x].startIndex; y <= tInfo[x].endIndex; y++) {\n\t\t\t\t\t\t\t\t\t\t\t\tsectionPoint.push(arrPoint[y]);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (tInfo[x].trafficIndex == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#06050D\";\n\t\t\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 1) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#61AB25\";\n\t\t\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 2) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#FFFF00\";\n\t\t\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 3) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#E87506\";\n\t\t\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 4) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#D61125\";\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t//라인그리기[S]\n\t\t\t\t\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\t\t\t\t\tpath : sectionPoint,\n\t\t\t\t\t\t\t\t\t\t\t\tstrokeColor : lineColor,\n\t\t\t\t\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t//라인그리기[E]\n\t\t\t\t\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} \n\t\t\t\t\t\telse \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\tpath : arrPoint,\n\t\t\t\t\t\t\t\tstrokeColor : \"#DD0000\",\n\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t//초기화 기능\n\t\t\t\t\tfunction resettingMap() \n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var i = 0; i < marker_attr.length; i++) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(i==0 || i == marker_attr.legnth-1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmarker_attr[i].setMap(null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmarker_attr=[];\n\t\t\t\t\t}\n\t\t\t//지도 타입 변경.\n\t\t\tfunction MapType(type){\n\t\t\t\tif(\"SATELLITE\" == type){\n\t\t\t\t\tmap.setMapType(Tmapv2.Map.MapType.SATELLITE);\n\t\t\t\t}else if(\"HYBRID\" == type){\n\t\t\t\t\tmap.setMapType(Tmapv2.Map.MapType.HYBRID)\n\t\t\t\t}else if(\"ROAD\" == type){\n\t\t\t\t\tmap.setMapType(Tmapv2.Map.MapType.ROAD)\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet cnt=0;\n\t\t\tfunction retres()\n\t\t\t{\n\t\t\t\tlet str=\"\";\n\t\t\t\tfor(const item of markers)\n\t\t\t\t{\n\t\t\t\t\tstr+='<div class=\"row btn-row g-3 mapbtn-section\"><h3 class=\"col-lg-9 map-source\">'+item[0]+'</h3>\\\n\t\t\t\t\t<button class=\"col-lg-3 del-btn\" type=\"button\" value=\"'+item[0]+'\" onclick=\"deletemark(this.value);return false;\">삭제</button></div>';\n\t\t\t\t}\n\t\t\t\t$(\"#result2\").html(str);\n\t\t\t}\n\t\t\tfunction deletemark(name)\n\t\t\t\t{\n\t\t\t\t\tmarkers.delete(name);\n\t\t\t\t\tretres();\n\t\t\t\t};\n\t\t\tretres();\n\t\t\tinitTmap();\n\t\t`;\n      script.type = \"text/javascript\";\n      script.async = \"async\";\n      document.head.appendChild(script);\n    }\n  }, [nearTour]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map_div\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 470,\n    columnNumber: 3\n  }, this);\n}; //axios Test//\n// function sendaxios()\n// {\n//   // 3. 경로탐색 API 사용요청\n//   // let headers = {\n//   //   'content-type': 'application/x-www-form-urlencoded',\n//   //   'appKey': 'l7xx34194c87b04c4474abec384877be1ee4'\n//   // };\n//   let body = {\n//     'startX': \"126.9850380932383\",\n//     'startY': \"37.566567545861645\",\n//     'endX': \"127.10331814639885\",\n//     'endY': \"37.403049076341794\",\n//     'reqCoordType': \"WGS84GEO\",\n//     'resCoordType': \"EPSG3857\",\n//     'searchOption': '0',\n//     'trafficInfo': 'Y'\n//   };\n//   let dd = qs.stringify(body);\n//   axios.post(\"https://apis.openapi.sk.com/tmap/routes?version=1&format=json&callback=result\",dd,\n//   {\n//     headers:{'appKey': 'l7xx34194c87b04c4474abec384877be1ee4'}\n//   }).then((res) => {console.log(res)}).then((err) => {console.log(err)});\n// }\n//axios Test end//\n\n\n_s(MapWrapper, \"ST3/u29cVHEPDmMibP87lvV3LmY=\");\n\n_c = MapWrapper;\n\nfunction FullScreenMap() {\n  //axios\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardBody, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"map\",\n            className: \"map\",\n            style: {\n              position: \"relative\",\n              overflow: \"hidden\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"map_wrap\",\n              class: \"map_wrap\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"row btn-row g-3\",\n                style: {\n                  marginTop: \"30px\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  class: \"col-lg-4\",\n                  id: \"mapty\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 518,\n                  columnNumber: 62\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  class: \"col-lg-8\",\n                  id: \"result\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 519,\n                  columnNumber: 6\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 518,\n                columnNumber: 6\n              }, this), /*#__PURE__*/_jsxDEV(MapWrapper, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 520,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"map_act_btn_wrap clear_box\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_c2 = FullScreenMap;\nexport default FullScreenMap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapWrapper\");\n$RefreshReg$(_c2, \"FullScreenMap\");","map":{"version":3,"sources":["/Users/youlee/Desktop/metanet_internship_project/frontendjeju/src/views/Maps.js"],"names":["Card","CardBody","axios","React","useEffect","useState","MapWrapper","nearTour","setNearTour","id","source","location","type","coordinates","reqUrl2","mapLoction","getTourNear","temp","URLSearchParams","window","search","get","params","longitude","latitude","distance","then","res","data","i","length","push","sessionStorage","setItem","undefined","script","document","createElement","innerHTML","async","head","appendChild","FullScreenMap","position","overflow","marginTop"],"mappings":";;;AAAA,SAASA,IAAT,EAAeC,QAAf,QAA+B,YAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA0C,OAA1C;;;;AAGA,MAAMC,UAAU,GAAG,MACnB;AAAA;;AACC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC;AAACI,IAAAA,EAAE,EAAC,EAAJ;AAAQC,IAAAA,MAAM,EAAC,EAAf;AAAmBC,IAAAA,QAAQ,EAAC;AAACC,MAAAA,IAAI,EAAC,EAAN;AAASC,MAAAA,WAAW,EAAC,CAAC,EAAD,EAAI,EAAJ;AAArB;AAA5B,GAAD,CAAxC;AACA,QAAMC,OAAO,GAAG,eAAhB;AACA,QAAMC,UAAU,GAAG,EAAnB;;AAEA,QAAMC,WAAW,GAAG,YAAW;AAC9B,QAAIC,IAAI,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACR,QAAP,CAAgBS,MAApC,CAAX;AAAuD;AACvD,UAAMlB,KAAK,CAACmB,GAAN,CAAUP,OAAV,EAAmB;AACvBQ,MAAAA,MAAM,EAAE;AACPC,QAAAA,SAAS,EAAEN,IAAI,CAACI,GAAL,CAAS,WAAT,CADJ;AAEPG,QAAAA,QAAQ,EAAEP,IAAI,CAACI,GAAL,CAAS,UAAT,CAFH;AAGPI,QAAAA,QAAQ,EAAE;AAHH;AADe,KAAnB,EAMFC,IANE,CAMIC,GAAD,IAASnB,WAAW,CAACmB,GAAG,CAACC,IAAL,CANvB,CAAN;AAOA,GATD;;AAWAxB,EAAAA,SAAS,CAAC,MAAM;AACfY,IAAAA,WAAW;AACX,GAFQ,EAEP,EAFO,CAAT;AAIAZ,EAAAA,SAAS,CAAC,MACV;AACC,SAAI,IAAIyB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGtB,QAAQ,CAACuB,MAA5B,EAAmCD,CAAC,EAApC,EACA;AACCd,MAAAA,UAAU,CAACgB,IAAX,CAAgBxB,QAAQ,CAACsB,CAAD,CAAR,CAAYnB,MAA5B;AACAK,MAAAA,UAAU,CAACgB,IAAX,CAAgBxB,QAAQ,CAACsB,CAAD,CAAR,CAAYlB,QAAZ,CAAqBE,WAArC;AACA;;AAEDmB,IAAAA,cAAc,CAACC,OAAf,CAAuB,UAAvB,EAAmClB,UAAnC;;AACA,QAAIA,UAAU,CAAC,CAAD,CAAV,IAAiBmB,SAArB,EAA+B;AAC9B,YAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,MAAAA,MAAM,CAACG,SAAP,GAAoB;AACvxaG;AAyaDH,MAAAA,MAAM,CAACvB,IAAP,GAAc,iBAAd;AACAuB,MAAAA,MAAM,CAACI,KAAP,GAAe,OAAf;AACAH,MAAAA,QAAQ,CAACI,IAAT,CAAcC,WAAd,CAA0BN,MAA1B;AACC;AACD,GAxbQ,EAwbN,CAAC5B,QAAD,CAxbM,CAAT;AA0bA,sBACC;AAAK,IAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,UADD;AAGA,CAldD,C,CAqdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA9eMD,U;;KAAAA,U;;AAgfN,SAASoC,aAAT,GACA;AAEC;AACC,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACM,QAAC,IAAD;AAAA,+BACE,QAAC,QAAD;AAAA,iCACE;AACE,YAAA,EAAE,EAAC,KADL;AAEE,YAAA,SAAS,EAAC,KAFZ;AAGE,YAAA,KAAK,EAAE;AAAEC,cAAAA,QAAQ,EAAE,UAAZ;AAAwBC,cAAAA,QAAQ,EAAE;AAAlC,aAHT;AAAA,oCAMF;AAAK,cAAA,EAAE,EAAC,UAAR;AAAmB,cAAA,KAAK,EAAC,UAAzB;AAAA,sCACT;AAAK,gBAAA,KAAK,EAAC,iBAAX;AAA6B,gBAAA,KAAK,EAAE;AAACC,kBAAAA,SAAS,EAAC;AAAX,iBAApC;AAAA,wCAAwD;AAAG,kBAAA,KAAK,EAAC,UAAT;AAAoB,kBAAA,EAAE,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,wBAAxD,eACA;AAAG,kBAAA,KAAK,EAAC,UAAT;AAAoB,kBAAA,EAAE,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,wBADA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADS,eAGA,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,sBAHA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANE,eAYF;AAAK,cAAA,KAAK,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,oBAZE,eAaF;AAAA;AAAA;AAAA;AAAA,oBAbE;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADN;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAyBD;;MA7BQH,a;AA8BT,eAAeA,aAAf","sourcesContent":["import { Card, CardBody } from \"reactstrap\";\nimport axios from \"axios\";\nimport React, { useEffect, useState} from 'react';\n\n\nconst MapWrapper = () => \n{\n\tconst [nearTour, setNearTour] = useState({id:'', source:'', location:{type:'',coordinates:['','']}})\n\tconst reqUrl2 = '/map/findNear';\n\tconst mapLoction = [];\n\t\n\tconst getTourNear = async () =>{\n\t\tvar temp = new URLSearchParams(window.location.search);;\n\t\tawait axios.get(reqUrl2, {\n\t\t\t\tparams: {\n\t\t\t\t\tlongitude: temp.get('longitude'),\n\t\t\t\t\tlatitude: temp.get('latitude'),\n\t\t\t\t\tdistance: 2\n\t\t\t\t}\n\t\t\t}).then((res) => setNearTour(res.data));\n\t}\n\n\tuseEffect(() => {\n\t\tgetTourNear();\n\t},[])\n\n\tuseEffect(() => \n\t{\n\t\tfor(let i = 0; i < nearTour.length;i++)\n\t\t{\n\t\t\tmapLoction.push(nearTour[i].source);\n\t\t\tmapLoction.push(nearTour[i].location.coordinates)\n\t\t}\n\n\t\tsessionStorage.setItem(\"maps_arr\", mapLoction);\n\t\tif (mapLoction[0] != undefined){\n\t\t\tconst script = document.createElement(\"script\");\n\t\t\tscript.innerHTML = `\n\t\t\t\tvar map;\n\t\t\t\tvar markerInfo;\n\t\t\t\t//출발지,도착지 마커\n\t\t\t\tvar marker_s, marker_e, marker_p, new_marker_p2;\n\t\t\t\t//경로그림정보\n\t\t\t\tvar drawInfoArr = [];\n\t\t\t\tvar drawInfoArr2 = [];\n\t\t\t\tvar marker_attr = [];\n\t\t\t\tvar chktraffic = [];\n\t\t\t\tvar resultdrawArr = [];\n\t\t\t\tvar resultMarkerArr = [];\n\n\t\t\t\t//관광지는 n x [2] 열은 위도,경도\n\t\t\t\tvar attr_list = [\"관광지1\", 33.5200,126.51555,\"관광지2\",33.5030,126.50235,\"관광지3\",33.5030,126.49235,\"관광지4\",33.5030,126.48235];\n\t\t\t\tattr_list = sessionStorage.getItem(\"maps_arr\");\n\t\t\t\tattr_list = attr_list.split(',');\n\t\t\t\tconst markers = new Map();\n\t\t\t\tfunction initTmap() {\n\t\t\t\t\t// 1. 지도 띄우기\n\t\t\t\t\tmap = new Tmapv2.Map(\"map_div\", {\n\t\t\t\t\t\tcenter : new Tmapv2.LatLng(33.4000,126.51555),\n\t\t\t\t\t\twidth : \"100%\",\n\t\t\t\t\t\theight : \"800px\",\n\t\t\t\t\t\tzoom : 11,\n\t\t\t\t\t\tzoomControl : true,\n\t\t\t\t\t\tscrollwheel : true\n\t\t\t\t\t});\n\t\t\t\t\taddMarkersTooMuch(attr_list);\n\t\t\t\t\t\n\n\t\t\t\t\tlet temp_html = \"\";\n\t\t\t\t\ttemp_html = '<button value=\"ROAD\" onclick=\"MapType(this.value)\">ROAD</button>\\\n\t\t\t\t\t<button value=\"SATELLITE\" onclick=\"MapType(this.value)\">SATELLITE</button>\\\n\t\t\t\t\t<button value=\"HYBRID\" onclick=\"MapType(this.value)\">HYBRID</button>';\n\t\t\t\t\t$(\"#mapty\").html(temp_html);\n\n\t\t\t\t\tlet cent_button=\"\";\n\t\t\t\t\tcent_button='<button>'+this+'</button>';\n\t\t\t\t\t$(\"#res3\").html(cent_button);\n\t\t\t\t\t\n\t\t\t\t\ttemp_html = '<form><input class=\"map-resetbtn\" type=\"button\" value=\"초기화\" onclick=\"window.location.reload()\"></form>';\n\t\t\t\t\t$(\"#init_map\").html(temp_html);\n\t\t\t\t}\n\t\t\t\t//end initmap\n\t\t\t\tfunction addMarkersTooMuch(attr_list) \n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < attr_list.length; i+=3) \n\t\t\t\t\t{\n\t\t\t\t\t\tlet title1 = attr_list[i];\n\t\t\t\t\t\tlet lat = attr_list[i+2];\n\t\t\t\t\t\tlet lng = attr_list[i+1];\n\t\t\t\t\t\tlet label=\"<span style='background-color: #46414E;color:white'>\"+attr_list[i]+\"</span>\";\n\t\t\t\t\t\tlet marker;\n\t\t\t\t\t\t//Marker 객체 생성.\n\t\t\t\t\t\tmarker = new Tmapv2.Marker({\n\t\t\t\t\t\t\tposition: new Tmapv2.LatLng(lat, lng), //Marker의 중심좌표 설정.\n\t\t\t\t\t\t\ttitle: title1,\n\t\t\t\t\t\t\tlabel: label\n\t\t\t\t\t\t});\n\t\t\t\t\t\tmarker_attr.push(marker);\n\t\t\t\t\t\tmarker.setMap(map); //Marker가 표시될 Map 설정.\n\t\t\t\t\t\tmarker.addListener(\"click\", function(evt) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmarkers.set(title1, marker);\n\t\t\t\t\t\t\tretres();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfunction removeMarkers() {\n\t\t\t\t\tmarkers.clear();\n\t\t\t\t}\n\n\t\t\t\tfunction Sendinfo() \n\t\t\t\t{\n\t\t\t\t\t\t//기존 맵에 있던 정보들 초기화\n\t\t\t\t\t\tresettingMap();\n\t\t\t\t\t\t//sendinfo variable\n\t\t\t\t\t\tlet startx=\"\";\n\t\t\t\t\t\tlet starty=\"\";\n\t\t\t\t\t\tlet endx=\"\";\n\t\t\t\t\t\tlet endy=\"\";\n\t\t\t\t\t\tlet pass=\"\";\n\t\t\t\t\t\tconst iter1 = markers.entries();\n\t\t\t\t\t\tlet temp_mark;\n\t\t\t\t\t\tfor(var i=0;i<markers.size;i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//start point\n\t\t\t\t\t\t\ttemp_mark = iter1.next().value;\n\t\t\t\t\t\t\ttemp_mark = temp_mark[1].getPosition();\n\t\t\t\t\t\t\tif(i==0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstarty = String(temp_mark.latitude());\n\t\t\t\t\t\t\t\tstartx = String(temp_mark.longitude());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if(i == Number(markers.size)-1) // end point\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tendy = String(temp_mark.latitude());\n\t\t\t\t\t\t\t\tendx = String(temp_mark.longitude());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse // pass point\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(i == Number(markers.size)-2)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpass+=String(temp_mark.longitude()) + \",\" + String(temp_mark.latitude());\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\tpass+=String(temp_mark.longitude()) + \",\" + String(temp_mark.latitude()+ \"_\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//JSON TYPE EDIT [S]\n\t\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t\ttype : \"POST\",\n\t\t\t\t\t\t\turl : \"https://apis.openapi.sk.com/tmap/routes?version=1&format=json&callback=result\",\n\t\t\t\t\t\t\tasync : false,\n\t\t\t\t\t\t\tdata : {\n\t\t\t\t\t\t\t\t\"appKey\" : \"l7xx34194c87b04c4474abec384877be1ee4\",\n\t\t\t\t\t\t\t\t\"startX\" : startx,\n\t\t\t\t\t\t\t\t\"startY\" : starty,\n\t\t\t\t\t\t\t\t\"endX\" : endx,\n\t\t\t\t\t\t\t\t\"endY\" : endy,\n\t\t\t\t\t\t\t\t\"passList\" : pass,\n\t\t\t\t\t\t\t\t\"reqCoordType\" : \"WGS84GEO\",\n\t\t\t\t\t\t\t\t\"resCoordType\" : \"EPSG3857\",\n\t\t\t\t\t\t\t\t\"searchOption\" : \"0\",\n\t\t\t\t\t\t\t\t\"trafficInfo\" : \"Y\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsuccess : function(response) \n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar resultData = response.features;\n\t\t\n\t\t\t\t\t\t\t\tvar tDistance = \"총 거리 : \"\n\t\t\t\t\t\t\t\t\t+ (resultData[0].properties.totalDistance / 1000)\n\t\t\t\t\t\t\t\t\t\t.toFixed(1) + \"km,\";\n\t\t\t\t\t\t\t\tvar tTime = \" 총 시간 : \"\n\t\t\t\t\t\t\t\t\t+ (resultData[0].properties.totalTime / 60)\n\t\t\t\t\t\t\t\t\t\t.toFixed(0) + \"분,\";\n\t\t\t\t\t\t\t\tvar tFare = \" 총 요금 : \"\n\t\t\t\t\t\t\t\t\t+ resultData[0].properties.totalFare\n\t\t\t\t\t\t\t\t\t+ \"원,\";\n\t\t\t\t\t\t\t\tvar taxiFare = \" 예상 택시 요금 : \"\n\t\t\t\t\t\t\t\t\t+ resultData[0].properties.taxiFare\n\t\t\t\t\t\t\t\t\t+ \"원\";\n\t\t\n\t\t\t\t\t\t\t\t$(\"#result\").text(\n\t\t\t\t\t\t\t\t\t\ttDistance + tTime + tFare\n\t\t\t\t\t\t\t\t\t\t\t\t+ taxiFare);\n\t\t\n\t\t\t\t\t\t\t\t//교통정보 표출 옵션값을 체크\n\t\t\t\t\t\t\t\tfor ( var i in resultData) { //for문 [S]\n\t\t\t\t\t\t\t\t\tvar geometry = resultData[i].geometry;\n\t\t\t\t\t\t\t\t\tvar properties = resultData[i].properties;\n\t\t\n\t\t\t\t\t\t\t\t\tif (geometry.type == \"LineString\") \n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t//교통 정보도 담음\n\t\t\t\t\t\t\t\t\tchktraffic.push(geometry.traffic);\n\t\t\t\t\t\t\t\t\tvar sectionInfos = [];\n\t\t\t\t\t\t\t\t\tvar trafficArr = geometry.traffic;\n\t\t\n\t\t\t\t\t\t\t\t\tfor ( var j in geometry.coordinates) \n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// 경로들의 결과값들을 포인트 객체로 변환 \n\t\t\t\t\t\t\t\t\t\tvar latlng = new Tmapv2.Point(geometry.coordinates[j][0], geometry.coordinates[j][1]);\n\t\t\t\t\t\t\t\t\t\t// 포인트 객체를 받아 좌표값으로 변환\n\t\t\t\t\t\t\t\t\t\tvar convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(latlng);\n\t\t\n\t\t\t\t\t\t\t\t\t\tsectionInfos.push(convertPoint);\n\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\tdrawLine(sectionInfos,trafficArr);\n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\telse \n\t\t\t\t\t\t\t\t\t{\n\t\t\n\t\t\t\t\t\t\t\t\tvar markerImg = \"\";\n\t\t\t\t\t\t\t\t\tvar pType = \"\";\n\t\t\n\t\t\t\t\t\t\t\t\tif (properties.pointType == \"S\") { //출발지 마커\n\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\";\n\t\t\t\t\t\t\t\t\t\tpType = \"S\";\n\t\t\t\t\t\t\t\t\t} else if (properties.pointType == \"E\") { //도착지 마커\n\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\";\n\t\t\t\t\t\t\t\t\t\tpType = \"E\";\n\t\t\t\t\t\t\t\t\t} else { //각 포인트 마커\n\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://topopen.tmap.co.kr/imgs/point.png\";\n\t\t\t\t\t\t\t\t\t\tpType = \"P\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\t// 경로들의 결과값들을 포인트 객체로 변환 \n\t\t\t\t\t\t\t\t\tvar latlon = new Tmapv2.Point(\n\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[0],\n\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[1]);\n\t\t\t\t\t\t\t\t\t// 포인트 객체를 받아 좌표값으로 다시 변환\n\t\t\t\t\t\t\t\t\tvar convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(latlon);\n\t\t\n\t\t\t\t\t\t\t\t\tvar routeInfoObj = \n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tmarkerImage : markerImg,\n\t\t\t\t\t\t\t\t\t\tlng : convertPoint._lng,\n\t\t\t\t\t\t\t\t\t\tlat : convertPoint._lat,\n\t\t\t\t\t\t\t\t\t\tpointType : pType\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t// 마커 추가\n\t\t\t\t\t\t\t\t\taddMarkers(routeInfoObj);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}//for문 [E]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t//JSON TYPE EDIT [E]\n\t\t\t\t\tinitTmap();\n\t\t\t}\n\n\t\t\tfunction addComma(num) {\n\t\t\t\t\t\tvar regexp = /\\B(?=(\\d{3})+(?!\\d))/g;\n\t\t\t\t\t\treturn num.toString().replace(regexp, ',');\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t//마커 생성하기\n\t\t\t\t\tfunction addMarkers(infoObj) \n\t\t\t\t\t{\n\t\t\t\t\t\tvar size = new Tmapv2.Size(24, 38);//아이콘 크기 설정합니다.\n\t\t\t\t\n\t\t\t\t\t\tif (infoObj.pointType == \"P\") { //포인트점일때는 아이콘 크기를 줄입니다.\n\t\t\t\t\t\t\tsize = new Tmapv2.Size(8, 8);\n\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\tmarker_p = new Tmapv2.Marker({\n\t\t\t\t\t\t\tposition : new Tmapv2.LatLng(infoObj.lat, infoObj.lng),\n\t\t\t\t\t\t\ticon : infoObj.markerImage,\n\t\t\t\t\t\t\ticonSize : size,\n\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t});\n\t\t\t\t\n\t\t\t\t\t\tresultMarkerArr.push(marker_p);\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t//라인그리기\n\t\t\t\t\tfunction drawLine(arrPoint, traffic) \n\t\t\t\t\t{\n\t\t\t\t\t\tvar polyline_;\n\t\t\t\t\n\t\t\t\t\t\tif (chktraffic.length != 0) {\n\t\t\t\t\n\t\t\t\t\t\t\t// 교통정보 혼잡도를 체크\n\t\t\t\t\t\t\t// strokeColor는 교통 정보상황에 다라서 변화\n\t\t\t\t\t\t\t// traffic :  0-정보없음, 1-원활, 2-서행, 3-지체, 4-정체  (black, green, yellow, orange, red)\n\t\t\t\t\n\t\t\t\t\t\t\tvar lineColor = \"\";\n\t\t\t\t\t\t\tif (traffic != \"0\" && traffic != undefined) \n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (traffic.length == 0) //length가 0인것은 교통정보가 없으므로 검은색으로 표시\n\t\t\t\t\t\t\t\t{ \n\t\t\t\t\n\t\t\t\t\t\t\t\t\tlineColor = \"#06050D\";\n\t\t\t\t\t\t\t\t\t//라인그리기[S]\n\t\t\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\t\t\tpath : arrPoint,\n\t\t\t\t\t\t\t\t\t\tstrokeColor : lineColor,\n\t\t\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t\t\t\t\t\t//라인그리기[E]\n\t\t\t\t\t\t\t\t} else \n\t\t\t\t\t\t\t\t{ //교통정보가 있음\n\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (traffic[0][0] != 0) { //교통정보 시작인덱스가 0이 아닌경우\n\t\t\t\t\t\t\t\t\t\tvar trafficObject = \"\";\n\t\t\t\t\t\t\t\t\t\tvar tInfo = [];\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var z = 0; z < traffic.length; z++) {\n\t\t\t\t\t\t\t\t\t\t\ttrafficObject = {\n\t\t\t\t\t\t\t\t\t\t\t\t\"startIndex\" : traffic[z][0],\n\t\t\t\t\t\t\t\t\t\t\t\t\"endIndex\" : traffic[z][1],\n\t\t\t\t\t\t\t\t\t\t\t\t\"trafficIndex\" : traffic[z][2],\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\ttInfo.push(trafficObject)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tvar noInfomationPoint = [];\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var p = 0; p < tInfo[0].startIndex; p++) {\n\t\t\t\t\t\t\t\t\t\t\tnoInfomationPoint.push(arrPoint[p]);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t//라인그리기[S]\n\t\t\t\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\t\t\t\tpath : noInfomationPoint,\n\t\t\t\t\t\t\t\t\t\t\tstrokeColor : \"#06050D\",\n\t\t\t\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t//라인그리기[E]\n\t\t\t\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var x = 0; x < tInfo.length; x++) {\n\t\t\t\t\t\t\t\t\t\t\tvar sectionPoint = []; //구간선언\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tfor (var y = tInfo[x].startIndex; y <= tInfo[x].endIndex; y++) {\n\t\t\t\t\t\t\t\t\t\t\t\tsectionPoint.push(arrPoint[y]);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (tInfo[x].trafficIndex == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#06050D\";\n\t\t\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 1) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#61AB25\";\n\t\t\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 2) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#FFFF00\";\n\t\t\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 3) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#E87506\";\n\t\t\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 4) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#D61125\";\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t//라인그리기[S]\n\t\t\t\t\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\t\t\t\t\tpath : sectionPoint,\n\t\t\t\t\t\t\t\t\t\t\t\tstrokeColor : lineColor,\n\t\t\t\t\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t//라인그리기[E]\n\t\t\t\t\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else { //0부터 시작하는 경우\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tvar trafficObject = \"\";\n\t\t\t\t\t\t\t\t\t\tvar tInfo = [];\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var z = 0; z < traffic.length; z++) {\n\t\t\t\t\t\t\t\t\t\t\ttrafficObject = {\n\t\t\t\t\t\t\t\t\t\t\t\t\"startIndex\" : traffic[z][0],\n\t\t\t\t\t\t\t\t\t\t\t\t\"endIndex\" : traffic[z][1],\n\t\t\t\t\t\t\t\t\t\t\t\t\"trafficIndex\" : traffic[z][2],\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\ttInfo.push(trafficObject)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var x = 0; x < tInfo.length; x++) {\n\t\t\t\t\t\t\t\t\t\t\tvar sectionPoint = []; //구간선언\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tfor (var y = tInfo[x].startIndex; y <= tInfo[x].endIndex; y++) {\n\t\t\t\t\t\t\t\t\t\t\t\tsectionPoint.push(arrPoint[y]);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (tInfo[x].trafficIndex == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#06050D\";\n\t\t\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 1) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#61AB25\";\n\t\t\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 2) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#FFFF00\";\n\t\t\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 3) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#E87506\";\n\t\t\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 4) {\n\t\t\t\t\t\t\t\t\t\t\t\tlineColor = \"#D61125\";\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t//라인그리기[S]\n\t\t\t\t\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\t\t\t\t\tpath : sectionPoint,\n\t\t\t\t\t\t\t\t\t\t\t\tstrokeColor : lineColor,\n\t\t\t\t\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t//라인그리기[E]\n\t\t\t\t\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} \n\t\t\t\t\t\telse \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\tpath : arrPoint,\n\t\t\t\t\t\t\t\tstrokeColor : \"#DD0000\",\n\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t//초기화 기능\n\t\t\t\t\tfunction resettingMap() \n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var i = 0; i < marker_attr.length; i++) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(i==0 || i == marker_attr.legnth-1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmarker_attr[i].setMap(null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmarker_attr=[];\n\t\t\t\t\t}\n\t\t\t//지도 타입 변경.\n\t\t\tfunction MapType(type){\n\t\t\t\tif(\"SATELLITE\" == type){\n\t\t\t\t\tmap.setMapType(Tmapv2.Map.MapType.SATELLITE);\n\t\t\t\t}else if(\"HYBRID\" == type){\n\t\t\t\t\tmap.setMapType(Tmapv2.Map.MapType.HYBRID)\n\t\t\t\t}else if(\"ROAD\" == type){\n\t\t\t\t\tmap.setMapType(Tmapv2.Map.MapType.ROAD)\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet cnt=0;\n\t\t\tfunction retres()\n\t\t\t{\n\t\t\t\tlet str=\"\";\n\t\t\t\tfor(const item of markers)\n\t\t\t\t{\n\t\t\t\t\tstr+='<div class=\"row btn-row g-3 mapbtn-section\"><h3 class=\"col-lg-9 map-source\">'+item[0]+'</h3>\\\n\t\t\t\t\t<button class=\"col-lg-3 del-btn\" type=\"button\" value=\"'+item[0]+'\" onclick=\"deletemark(this.value);return false;\">삭제</button></div>';\n\t\t\t\t}\n\t\t\t\t$(\"#result2\").html(str);\n\t\t\t}\n\t\t\tfunction deletemark(name)\n\t\t\t\t{\n\t\t\t\t\tmarkers.delete(name);\n\t\t\t\t\tretres();\n\t\t\t\t};\n\t\t\tretres();\n\t\t\tinitTmap();\n\t\t`;\n\t\tscript.type = \"text/javascript\";\n\t\tscript.async = \"async\";\n\t\tdocument.head.appendChild(script);\n\t\t}\n\t}, [nearTour]);\n\n\treturn (\n\t\t<div id=\"map_div\"/>\n\t);\n}\n\n\n//axios Test//\n// function sendaxios()\n// {\n//   // 3. 경로탐색 API 사용요청\n//   // let headers = {\n//   //   'content-type': 'application/x-www-form-urlencoded',\n//   //   'appKey': 'l7xx34194c87b04c4474abec384877be1ee4'\n//   // };\n  \n//   let body = {\n//     'startX': \"126.9850380932383\",\n//     'startY': \"37.566567545861645\",\n//     'endX': \"127.10331814639885\",\n//     'endY': \"37.403049076341794\",\n//     'reqCoordType': \"WGS84GEO\",\n//     'resCoordType': \"EPSG3857\",\n//     'searchOption': '0',\n//     'trafficInfo': 'Y'\n//   };\n//   let dd = qs.stringify(body);\n//   axios.post(\"https://apis.openapi.sk.com/tmap/routes?version=1&format=json&callback=result\",dd,\n//   {\n//     headers:{'appKey': 'l7xx34194c87b04c4474abec384877be1ee4'}\n//   }).then((res) => {console.log(res)}).then((err) => {console.log(err)});\n// }\n//axios Test end//\n\nfunction FullScreenMap() \n{\n\n\t//axios\n  return (\n    <>\n      <div className=\"content\">\n            <Card>\n              <CardBody>\n                <div\n                  id=\"map\"\n                  className=\"map\"\n                  style={{ position: \"relative\", overflow: \"hidden\" }}\n                >\n                \n              <div id=\"map_wrap\" class=\"map_wrap\">\n\t\t\t  <div class=\"row btn-row g-3\" style={{marginTop:\"30px\"}}><p class=\"col-lg-4\" id=\"mapty\"/>\n\t\t\t  <p class=\"col-lg-8\" id=\"result\"/></div>\n              <MapWrapper/>\n\t\t\t  \n              </div>\n              <div class=\"map_act_btn_wrap clear_box\"></div>\n              <br />\n                </div>\n              </CardBody>\n            </Card>\n      </div>\n    </>\n  );\n}\nexport default FullScreenMap;"]},"metadata":{},"sourceType":"module"}