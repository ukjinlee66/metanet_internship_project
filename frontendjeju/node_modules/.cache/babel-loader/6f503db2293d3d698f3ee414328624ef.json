{"ast":null,"code":"var _jsxFileName = \"/Users/youlee/Desktop/metanet_internship_project/frontendjeju/src/components/KeywordList.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport '../assets/css/bootstrap.min.css';\nimport '../assets/css/style.css';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction KeywordList(props) {\n  _s();\n\n  const [keywordList, setKeywordList] = useState([{\n    keyword: ''\n  }, {\n    keyword: ''\n  }, {\n    keyword: ''\n  }, {\n    keyword: ''\n  }, {\n    keyword: ''\n  }, {\n    keyword: ''\n  }, {\n    keyword: ''\n  }, {\n    keyword: ''\n  }, {\n    keyword: ''\n  }, {\n    keyword: ''\n  }, {\n    keyword: ''\n  }, {\n    keyword: ''\n  }]);\n  const [checkKeywordList, setCheckKeywordList] = useState([]);\n  const [strResult, setStrResult] = useState('');\n  const reqUrl = '/keyword/randomRecommendKeyword';\n  const elasticUrl = '/log/searchKeywordList'; // 키워드 옵션 리스트 요청\n\n  const getKeyword = async () => {\n    await axios.get(reqUrl).then(res => setKeywordList(res.data));\n  }; // elasticSearch에 키워드 추천 log데이터 통신\n\n\n  const insertElastic = async searchWord => {\n    await axios.get(elasticUrl, {\n      params: {\n        search: searchWord,\n        logClass: 'searchLog'\n      }\n    }).then();\n  };\n\n  useEffect(() => {\n    getKeyword();\n  }, []); // 키워드 리스트가 변할때마다 실행되는 함수\n\n  useEffect(() => {\n    setStyleColor();\n  }, [keywordList]); // 새로고침시 선택된 키워드는 css 유지, 아닐시 초기화\n\n  const setStyleColor = () => {\n    for (let i = 0; i < keywordList.length; i++) {\n      const x = document.getElementById('keyword' + i);\n\n      if (checkKeywordList.indexOf(document.getElementById('keyword' + i).value) > -1) {\n        x.style.borderColor = \"var(--primary)\";\n        x.style.color = \"var(--primary)\";\n        x.style.backgroundColor = \"#FEFDCA\";\n      } else {\n        x.style.borderColor = \"#d9d8d8\";\n        x.style.color = \"#06113C\";\n        x.style.backgroundColor = \"#FFFFFF\";\n      }\n    }\n  }; // 체크박스에서 선택된 키워드로 배열 구성\n\n\n  const getCheckboxValue = (value, id) => {\n    const checkKeyword = checkKeywordList;\n    const idx = checkKeyword.indexOf(value);\n    const x = document.getElementById(id);\n\n    if (idx > -1) {\n      checkKeyword.splice(idx, 1);\n\n      if (x.style.borderColor == \"var(--primary)\") {\n        x.style.borderColor = \"#d9d8d8\";\n        x.style.color = \"#06113C\";\n        x.style.backgroundColor = \"#FFFFFF\";\n      } else {\n        x.style.borderColor = \"var(--primary)\";\n        x.style.color = \"var(--primary)\";\n        x.style.backgroundColor = \"#FEFDCA\";\n      }\n    } else {\n      if (checkKeyword.length < 5) {\n        checkKeyword.push(value);\n\n        if (x.style.borderColor == \"var(--primary)\") {\n          x.style.borderColor = \"#d9d8d8\";\n          x.style.color = \"#06113C\";\n          x.style.backgroundColor = \"#FFFFFF\";\n        } else {\n          x.style.borderColor = \"var(--primary)\";\n          x.style.color = \"var(--primary)\";\n          x.style.backgroundColor = \"#FEFDCA\";\n        }\n      } else {\n        alert('최대 5개의 키워드만 선택할 수 있습니다.');\n      }\n    }\n\n    setCheckKeywordList(checkKeyword);\n    setResultKeyword();\n  }; // 체크박스에서 선택된 키워드로 삭제\n\n\n  const deleteCheckboxValue = value => {\n    const checkKeyword = checkKeywordList;\n    const idx = checkKeyword.indexOf(value);\n    checkKeyword.splice(idx, 1);\n\n    for (let i = 0; i < keywordList.length; i++) {\n      const x = document.getElementById('keyword' + i);\n\n      if (document.getElementById('keyword' + i).value == value) {\n        x.style.borderColor = \"#d9d8d8\";\n        x.style.color = \"#06113C\";\n        x.style.backgroundColor = \"#FFFFFF\";\n      }\n    }\n\n    setCheckKeywordList(checkKeyword);\n    setResultKeyword();\n  }; // 체크박스에서 선택된 키워드로 문자열 구성\n\n\n  const setResultKeyword = () => {\n    let resultStr = '';\n\n    for (let i = 0; i < checkKeywordList.length; i++) {\n      if (resultStr == '') {\n        resultStr += checkKeywordList[i];\n      } else {\n        resultStr += ' ' + checkKeywordList[i];\n      }\n    }\n\n    setStrResult(resultStr);\n  }; // 선택된 키워드 리스트를 확인할 수 있도록 선택 리스트 렌더링\n\n\n  const selectKeywordRender = () => {\n    const renderResult = [];\n\n    for (let i = 0; i < checkKeywordList.length; i++) {\n      renderResult.push( /*#__PURE__*/_jsxDEV(Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"select-keyword-btn\",\n          value: checkKeywordList[i],\n          onClick: event => deleteCheckboxValue(event.target.value),\n          children: [\"#\", checkKeywordList[i]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this));\n    }\n\n    return renderResult;\n  }; // 키워드 리스트를 기반으로 옵션으로 제공할 키워드 체크박스 렌더링\n\n\n  const ketwordListRender = () => {\n    const renderResult = [];\n\n    for (let i = 0; i < keywordList.length; i++) {\n      renderResult.push( /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"col-4 keyword-list\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"keyword\" + i,\n          class: \"keyword-btn\",\n          value: keywordList[i].keyword,\n          onClick: event => getCheckboxValue(event.target.value, event.target.id),\n          children: [\"#\", keywordList[i].keyword]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this));\n    }\n\n    return renderResult;\n  }; // 추천 버튼 클릭시 값 전달 및 이동\n\n\n  function btClick(e) {\n    window.sessionStorage.setItem('recoKeyword', strResult);\n    insertElastic(strResult);\n    window.location.href = \"/jeju/TouristAttractionListReco\";\n  } // 새로고침 버튼 클릭시 \n\n\n  const refreshKeyword = async () => {\n    await axios.get(reqUrl).then(res => setKeywordList(res.data));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-xxl py-5 \",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row keyword-basket\",\n        children: [/*#__PURE__*/_jsxDEV(\"ui\", {\n          className: \"col-lg-11 row g-4 keyword-section\",\n          children: ketwordListRender()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-lg-1 btn-section\",\n          \"data-wow-delay\": \"0.1s\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"btn-list\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              class: \"bi bi-arrow-clockwise fa-2x refresh-icon\",\n              onClick: refreshKeyword\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row g-4 select-keyword\",\n        children: [/*#__PURE__*/_jsxDEV(\"ui\", {\n          className: \"col-lg-11 row g-4 select-keyword-section\",\n          children: selectKeywordRender()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-lg-1 btn-section\",\n          \"data-wow-delay\": \"0.1s\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"btn-list\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              class: \"recommend-btn\",\n              onClick: btClick,\n              children: \"\\uCD94\\uCC9C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n}\n\n_s(KeywordList, \"1epE31SjX0Ox74lrBjf3swEHmgE=\");\n\n_c = KeywordList;\nexport default KeywordList;\n\nvar _c;\n\n$RefreshReg$(_c, \"KeywordList\");","map":{"version":3,"sources":["/Users/youlee/Desktop/metanet_internship_project/frontendjeju/src/components/KeywordList.js"],"names":["React","Fragment","useEffect","useState","axios","KeywordList","props","keywordList","setKeywordList","keyword","checkKeywordList","setCheckKeywordList","strResult","setStrResult","reqUrl","elasticUrl","getKeyword","get","then","res","data","insertElastic","searchWord","params","search","logClass","setStyleColor","i","length","x","document","getElementById","indexOf","value","style","borderColor","color","backgroundColor","getCheckboxValue","id","checkKeyword","idx","splice","push","alert","setResultKeyword","deleteCheckboxValue","resultStr","selectKeywordRender","renderResult","event","target","ketwordListRender","btClick","e","window","sessionStorage","setItem","location","href","refreshKeyword"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport '../assets/css/bootstrap.min.css';\nimport '../assets/css/style.css';\nimport axios from \"axios\";\n\nfunction KeywordList(props) {\n\n    const [keywordList, setKeywordList] = useState([{keyword:''},{keyword:''},{keyword:''},{keyword:''},{keyword:''},{keyword:''},{keyword:''},{keyword:''},{keyword:''},{keyword:''},{keyword:''},{keyword:''}]);\n    const [checkKeywordList, setCheckKeywordList] = useState([])\n    const [strResult, setStrResult] = useState('')\n\n    const reqUrl = '/keyword/randomRecommendKeyword'\n    const elasticUrl = '/log/searchKeywordList'\n    // 키워드 옵션 리스트 요청\n    const getKeyword = async () => {\n        await axios\n            .get(reqUrl)\n            .then((res) => setKeywordList(res.data));\n    }\n\n    // elasticSearch에 키워드 추천 log데이터 통신\n    const insertElastic = async (searchWord) => {\n        await axios\n            .get(elasticUrl, {\n                params:{\n                    search: searchWord,\n                    logClass:'searchLog'\n                }\n            })\n            .then();\n    }\n\n    useEffect(() => {\n        getKeyword();\n    }, [])\n\n    // 키워드 리스트가 변할때마다 실행되는 함수\n    useEffect(() => {\n        setStyleColor()\n    }, [keywordList])\n\n    // 새로고침시 선택된 키워드는 css 유지, 아닐시 초기화\n    const setStyleColor = () => {\n        for (let i = 0; i < keywordList.length; i++) {\n            const x = document.getElementById('keyword'+i);\n            if (checkKeywordList.indexOf(document.getElementById('keyword'+i).value) > -1){\n                x.style.borderColor = \"var(--primary)\";\n                x.style.color = \"var(--primary)\";\n                x.style.backgroundColor = \"#FEFDCA\";\n            }\n            else{\n                x.style.borderColor = \"#d9d8d8\";\n                x.style.color = \"#06113C\";\n                x.style.backgroundColor = \"#FFFFFF\";\n            }\n        }\n    }\n\n    // 체크박스에서 선택된 키워드로 배열 구성\n    const getCheckboxValue = (value, id) => {\n        const checkKeyword = checkKeywordList\n        const idx = checkKeyword.indexOf(value)\n        const x = document.getElementById(id);       \n        if (idx > -1){\n            checkKeyword.splice(idx, 1)\n            if (x.style.borderColor == \"var(--primary)\"){\n                x.style.borderColor = \"#d9d8d8\";\n                x.style.color = \"#06113C\";\n                x.style.backgroundColor = \"#FFFFFF\";\n            }\n            else{\n                x.style.borderColor = \"var(--primary)\";\n                x.style.color = \"var(--primary)\";\n                x.style.backgroundColor = \"#FEFDCA\";\n            }\n        }\n        else{\n            if (checkKeyword.length < 5){\n                checkKeyword.push(value)\n                if (x.style.borderColor == \"var(--primary)\"){\n                    x.style.borderColor = \"#d9d8d8\";\n                    x.style.color = \"#06113C\";\n                    x.style.backgroundColor = \"#FFFFFF\";\n                }\n                else{\n                    x.style.borderColor = \"var(--primary)\";\n                    x.style.color = \"var(--primary)\";\n                    x.style.backgroundColor = \"#FEFDCA\";\n                }\n            }\n            else{\n                alert('최대 5개의 키워드만 선택할 수 있습니다.')\n            }\n        }\n\n        setCheckKeywordList(checkKeyword)\n        setResultKeyword()\n    }\n\n    // 체크박스에서 선택된 키워드로 삭제\n    const deleteCheckboxValue = (value) => {\n        const checkKeyword = checkKeywordList\n        const idx = checkKeyword.indexOf(value)\n\n        checkKeyword.splice(idx, 1)\n\n        for (let i = 0; i < keywordList.length; i++) {\n            const x = document.getElementById('keyword'+i);\n            if (document.getElementById('keyword'+i).value == value){\n                x.style.borderColor = \"#d9d8d8\";\n                x.style.color = \"#06113C\";\n                x.style.backgroundColor = \"#FFFFFF\";\n            }\n        }\n        \n        setCheckKeywordList(checkKeyword)\n        setResultKeyword()\n    }\n\n    // 체크박스에서 선택된 키워드로 문자열 구성\n    const setResultKeyword = () => {\n        let resultStr = ''\n        for (let i = 0; i < checkKeywordList.length; i++) {\n            if (resultStr == ''){\n                resultStr += checkKeywordList[i]\n            } else{\n                resultStr += ' ' + checkKeywordList[i]\n            }\n        }\n        setStrResult(resultStr)\n    }\n\n    // 선택된 키워드 리스트를 확인할 수 있도록 선택 리스트 렌더링\n    const selectKeywordRender = () => {\n        const renderResult = [];\n        for (let i = 0; i < checkKeywordList.length; i++) {\n            renderResult.push(\n                <Fragment>\n                    <button class=\"select-keyword-btn\" value={checkKeywordList[i]} onClick={(event) => deleteCheckboxValue(event.target.value)}>#{checkKeywordList[i]}</button>\n                </Fragment>\n        );}\n        return renderResult;\n    };\n\n    // 키워드 리스트를 기반으로 옵션으로 제공할 키워드 체크박스 렌더링\n    const ketwordListRender = () => {\n        const renderResult = [];\n        for (let i = 0; i < keywordList.length; i++) {\n            renderResult.push(\n                <li className='col-4 keyword-list'>\n                    <button id={\"keyword\"+i} class=\"keyword-btn\" value={keywordList[i].keyword} onClick={(event) => getCheckboxValue(event.target.value, event.target.id)}>#{keywordList[i].keyword}</button>\n                </li>\n            );}\n        return renderResult;\n    };\n\n    // 추천 버튼 클릭시 값 전달 및 이동\n    function btClick(e) {\n        window.sessionStorage.setItem('recoKeyword', strResult);\n        insertElastic(strResult);\n        window.location.href = \"/jeju/TouristAttractionListReco\";\n    }\n\n    // 새로고침 버튼 클릭시 \n    const refreshKeyword = async () => {\n        await axios\n            .get(reqUrl)\n            .then((res) => setKeywordList(res.data));\n    }\n\n    return (\n        <div className=\"container-xxl py-5 \">\n            <div className=\"container\">\n                {/* <div className=\"row g-4 recommend-keyword-section\">\n                    <div className='col-lg-2 hotkeyword-title'>\n                        Hot Keyword\n                    </div>\n                    <ui className='col-lg-10'>\n                        {}\n                    </ui>\n                </div> */}\n                {/* <h1 className=\"text-center mb-5 wow fadeInUp\" data-wow-delay=\"0.1s\">키워드 추천</h1> */}\n                <div className=\"row keyword-basket\">\n                    <ui className='col-lg-11 row g-4 keyword-section'>\n                        {ketwordListRender()}\n                    </ui>\n                    <div class=\"col-lg-1 btn-section\" data-wow-delay=\"0.1s\">\n                        <div class=\"btn-list\">\n                            <i class=\"bi bi-arrow-clockwise fa-2x refresh-icon\" onClick={refreshKeyword}></i>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row g-4 select-keyword\">\n                    <ui className='col-lg-11 row g-4 select-keyword-section'>\n                        {selectKeywordRender()}\n                    </ui>\n                    <div class=\"col-lg-1 btn-section\" data-wow-delay=\"0.1s\">\n                        <div class=\"btn-list\">\n                            <button type=\"button\" class=\"recommend-btn\" onClick={btClick}>추천</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default KeywordList;"]},"metadata":{},"sourceType":"module"}